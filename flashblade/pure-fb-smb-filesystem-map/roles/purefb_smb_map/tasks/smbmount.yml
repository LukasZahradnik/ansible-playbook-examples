---
- name: validation | Fail if given Flashblade server not exist for {{ outer_loop.key }}
  fail:
    msg: FB server {{ mount_details.server.fb_name }} not available
  when: mount_details.server.fb_name not in array_inventory
  delegate_to: "localhost"
  run_once: true

- name: facts | Set fb_url and fb_token fact from array_inventory for {{ outer_loop.key }}
  set_fact:
    fb_url: "{{ array_inventory[mount_details.server.fb_name].fb_host }}"
    fb_token: "{{ array_secrets[mount_details.server.fb_name].api_token }}"
  no_log: true
  run_once: true

- name: facts | Get information from {{ mount_details.server.fb_name }} for {{ outer_loop.key }}
  purefb_info:
    gather_subset: 
      - config
      - network
      - subnets
      - filesystems
    fb_url: "{{ fb_url }}"
    api_token: "{{ fb_token }}"
  delegate_to: "localhost"
  run_once: true
  register: blade_info

- name: validation | Fail if fileshare not exist on {{ mount_details.server.fb_name }}
  fail:
    msg: Fileshare {{ mount_details.server.fileshare }} not available on FB server
  when: mount_details.server.fileshare not in blade_info['purefb_info']['filesystems']
  delegate_to: "localhost"
  run_once: true

- name: validation | Fail if fileshare is in destroyed state on {{ mount_details.server.fb_name }}
  fail:
    msg: Fileshare {{ mount_details.server.fileshare }} is in destroyed state on FB server
  when: mount_details.server.fileshare in blade_info['purefb_info']['filesystems'] and blade_info['purefb_info']['filesystems'][mount_details.server.fileshare]['destroyed']|bool
  delegate_to: "localhost"
  run_once: true

- name: validation | Fail if data VIP not exist on {{ mount_details.server.fb_name }}
  fail:
    msg: data VIP {{ mount_details.server.data_vip }} not available on FB server
  when: mount_details.server.data_vip not in blade_info['purefb_info']['network']

- name: Set facts | Set data vip 
  set_fact:
    vip: "{{ blade_info['purefb_info']['network'][mount_details.server.data_vip]['address'] }}"

- name: mount | mount fileshare for {{ outer_loop.key }}
  block:
    - name: mount | Create mapped drive for {{ outer_loop.key }}
      win_mapped_drive:
        letter: "{{ mount_details.client.drive_letter }}"
        path: \\{{vip}}\{{mount_details.server.fileshare}}
        state: present
      register: mount_drive

    # - name: mount | Restart explorer process 
    #   win_command: powershell.exe Stop-Process -ProcessName explorer
    #   when: mount_drive.changed

  when:
    - mount_details.client.mount_state is not defined or mount_details.client.mount_state == "mapped"

- name: unmount | Remove mapped fileshare for {{ outer_loop.key }}
  block:
    - name: unmount | Remove mapped fileshare 
      win_mapped_drive:
        letter: "{{ mount_details.client.drive_letter }}"
        path: \\{{vip}}\{{mount_details.server.fileshare}}
        state: absent
      register: unmount_drive

    # - name: unmount | Restart explorer process 
    #   win_command: powershell.exe Stop-Process -ProcessName explorer
    #   when: unmount_drive.changed
    
    # - name: Reboot the machine with all defaults
    #   win_reboot:
    #   when: unmount_drive.changed

  when:
    - mount_details.client.mount_state is defined
    - mount_details.client.mount_state == 'unmapped'
