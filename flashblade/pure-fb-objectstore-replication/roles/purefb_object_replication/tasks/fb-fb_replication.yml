---
- name: facts | Combine array_inventory and array_secrets for {{ repl_loop.key }}
  set_fact:
    combined_inventory: "{{ array_inventory|combine(array_secrets, recursive=True) }}"
  no_log: true

- name: facts | Set fb_url and fb_token facts from array_inventory for {{ repl_loop.key }}
  set_fact:
    src_fb_url: "{{ combined_inventory[repl_vars.src.server].fb_host }}"
    src_fb_token: "{{ combined_inventory[repl_vars.src.server].api_token }}"
    dst_fb_url: "{{ combined_inventory[repl_vars.dst.server].fb_host }}"
    dst_fb_token: "{{ combined_inventory[repl_vars.dst.server].api_token }}"
  no_log: true

- name: validation | Check connectivity for source FBServer
  shell: ping -q -c 4 -W 1 {{ src_fb_url }}
  register: src_ping_status
  failed_when: false
  changed_when: false

- name: validation | Fail if source Flashblade server not reachable
  fail:
    msg: Source FB server {{ src_fb_url }} not reachable
  when: "'100% packet loss' in src_ping_status.stdout"

- name: validation | Check connectivity for target FBServer
  shell: ping -q -c 4 -W 1 {{ dst_fb_url }}
  register: dst_ping_status
  failed_when: false
  changed_when: false

- name: validation | Fail if target Flashblade server not reachable
  fail:
    msg: Target FB server {{ dst_fb_url }} not reachable
  when: "'100% packet loss' in dst_ping_status.stdout"

- name: validation | Check if reachable fb_host is FB server or not to fail fast
  uri:
    url: https://{{ src_fb_url }}/api/api_version
    method: GET
    validate_certs: no
    return_content: yes
    timeout: 10
  register: api_version
  failed_when: false

- name: validation | Fail if Flashblade server mentioned in "fb_host" is not a valid FlashBlade
  fail:
    msg: fb_host {{ src_fb_url }} is not valid FlashBlade server
  when: (api_version.status != 200 )

- name: validation | Check if reachable fb_host is FB server or not to fail fast
  uri:
    url: https://{{ dst_fb_url }}/api/api_version
    method: GET
    validate_certs: no
    return_content: yes
    timeout: 10
  register: api_version
  failed_when: false

- name: validation | Fail if Flashblade server mentioned in "fb_host" is not a valid FlashBlade server
  fail:
    msg: fb_host {{ dst_fb_url }} is not valid FlashBlade server
  when: (api_version.status != 200 )

- name: facts | Get information from src FB server for {{ repl_loop.key }}
  purefb_info:
    gather_subset: 
      - minimum
      - buckets
      - network
      - replication
      - config
    fb_url: "{{ src_fb_url }}"
    api_token: "{{ src_fb_token }}"
  no_log: true
  register: src_fb_info

- name: facts | Get information from dst FB server for {{ repl_loop.key }}
  purefb_info:
    gather_subset: 
      - minimum
      - buckets
      - network
      - replication
      - config
    fb_url: "{{ dst_fb_url }}"
    api_token: "{{ dst_fb_token }}"
  no_log: true
  register: dst_fb_info

- name: facts | Set src fb name and dst fb name for {{ repl_loop.key }}
  set_fact:
    src_fb_name: "{{ src_fb_info.purefb_info.default.flashblade_name }}" 
    dst_fb_name: "{{ dst_fb_info.purefb_info.default.flashblade_name }}" 

- name: validation | Fail if src bucket already have replica link for {{ repl_loop.key }}
  fail:
    msg: Cannot have multiple replica links on the same local bucket {{ repl_vars.src.bucket }}
  when:
    - repl_vars.common_params is defined
    - repl_vars.common_params.state is defined and repl_vars.common_params.state != 'disabled'
    - src_fb_info.purefb_info.bucket_replication | length > 0
    - src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket] is defined
    - src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket].remote_bucket != repl_vars.dst.bucket

# Create replication
- name: Create remote credential and replica link for {{ repl_loop.key }}
  block:
  - name: account | Create src s3 account for {{ repl_loop.key }}
    purefb_s3acc:
      name: "{{ repl_vars.src.account }}"
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: bucket | Create src bucket for {{ repl_loop.key }}
    purefb_bucket:
      name: "{{ repl_vars.src.bucket }}"
      account: "{{ repl_vars.src.account }}"
      versioning: enabled
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    when:
      - repl_vars.src.bucket not in src_fb_info.purefb_info.buckets

  - name: account | Create dst s3 account for {{ repl_loop.key }}
    purefb_s3acc:
      name: "{{ repl_vars.dst.account }}"
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"

  - name: bucket | Create bucket for {{ repl_loop.key }}
    purefb_bucket:
      name: "{{ repl_vars.dst.bucket }}"
      account: "{{ repl_vars.dst.account }}"
      versioning: enabled
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.dst.bucket not in dst_fb_info.purefb_info.buckets

  - name: validation | Warn if src bucket versioning not enabled for {{ repl_loop.key }}
    fail:
      msg: |
        Source bucket versioning is {{ src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning }}.
        Versioning must me enabled to setup replication. Next task will enable versioning.
    when:
      - repl_vars.src.bucket in src_fb_info.purefb_info.buckets
      - src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'none' or src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'suspended'
    ignore_errors: yes
 
  - name: versioning | Enable versioning on the src bucket for {{ repl_loop.key }}
    purefb_bucket:
      name: "{{ repl_vars.src.bucket }}"
      account: "{{ repl_vars.src.account }}"
      versioning: enabled
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    when:
      - repl_vars.src.bucket in src_fb_info.purefb_info.buckets
      - src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'none' or src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'suspended'

  - name: validation | Warn if dst bucket versioning not enabled for {{ repl_loop.key }}
    fail:
      msg: |
        Destination bucket versioning is {{ dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning }}.
        Versioning must me enabled to setup replication. Next task will enable versioning.
    when:
      - repl_vars.dst.bucket in dst_fb_info.purefb_info.buckets
      - dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning == 'none' or  dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning == 'suspended'
    ignore_errors: yes
 
  - name: versioning | Enable versioning on the dst bucket for {{ repl_loop.key }}
    purefb_bucket:
      name: "{{ repl_vars.dst.bucket }}"
      account: "{{ repl_vars.dst.account }}"
      versioning: enabled
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.dst.bucket in dst_fb_info.purefb_info.buckets
      - dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning is defined
      - dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning == 'none' or dst_fb_info.purefb_info.buckets[repl_vars.dst.bucket].versioning == 'suspended'

  - name: facts | Set src s3 secrets from fb_secrets for {{ repl_loop.key }}
    set_fact:
      src_access_key: "{{ s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user].access_id }}" 
      src_secret_key: "{{ s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user].access_key }}"
    when:
      - s3_secrets is defined and s3_secrets | length > 0
      - s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user] is defined
    no_log: true

  - name: user | Create s3 user on {{ repl_vars.src.server }} for {{ repl_loop.key }}
    purefb_s3user:
      name: "{{ repl_vars.src.user }}"
      account: "{{ repl_vars.src.account }}"
      access_key: true
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    register: user_info
    when: src_access_key is not defined and src_secret_key is not defined

  - name: validation | Fail if src s3 secrets not available for {{ repl_loop.key }}
    fail:
      msg: >
        Maximum Access Key count reached for user {{ repl_vars.src.user }}, 
        create user with different name to generate secret keys
    when:
      - user_info.s3user_info is not defined or user_info.s3user_info|length == 0

  - name: secrets | Set source access key and secret key for {{ repl_loop.key }}
    set_fact:
      src_access_key: "{{ user_info.s3user_info.fb_s3user.access_id }}"
      src_secret_key: "{{ user_info.s3user_info.fb_s3user.access_key }}"
    when: 
      - user_info.s3user_info is defined 
      - user_info.s3user_info | length > 0
    no_log: true

  - name: facts | Set dst s3 secrets from fb_secrets for {{ repl_loop.key }}
    set_fact:
      dst_access_key: "{{ s3_secrets[repl_vars.dst.account+'_'+repl_vars.dst.user].access_id }}" 
      dst_secret_key: "{{ s3_secrets[repl_vars.dst.account+'_'+repl_vars.dst.user].access_key }}" 
    when:
      - s3_secrets is defined and s3_secrets | length > 0
      - s3_secrets[repl_vars.dst.account+'_'+repl_vars.dst.user] is defined
    no_log: true

  - name: user | Create s3 user on {{ repl_vars.dst.server }} for {{ repl_loop.key }}
    purefb_s3user:
      name: "{{ repl_vars.dst.user }}"
      account: "{{ repl_vars.dst.account }}"
      access_key: true
      state: present
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    register: user_info
    when: dst_access_key is not defined and dst_secret_key is not defined

  - name: validation | Fail if dst s3 secrets not available for {{ repl_loop.key }}
    fail:
      msg: >
        Maximum Access Key count reached for user {{ repl_vars.src.user }}, 
        create user with different name to generate secret keys
    when:
      - user_info.s3user_info is not defined or user_info.s3user_info | length == 0

  - name: secrets | Set destination access key and secret key for {{ repl_loop.key }}
    set_fact:
      dst_access_key: "{{ user_info.s3user_info.fb_s3user.access_id }}"
      dst_secret_key: "{{ user_info.s3user_info.fb_s3user.access_key }}"
    when: 
      - user_info.s3user_info is defined 
      - user_info.s3user_info | length > 0
    no_log: true

  - name: validation | Fail if s3 secrets not available for {{ repl_loop.key }}
    fail:
      msg: s3 secrets {{item}} not available
    loop: 
      - src_access_key
      - src_secret_key
      - dst_access_key
      - dst_secret_key
    when: vars[item] is not defined

  - name: certificate | Create a SSL certifcate on src FlashBlade for {{ repl_loop.key }}
    purefb_certs:
      name: dst_repl_cert
      contents: "{{ dst_fb_info.purefb_info.config.ssl_certs.certificate }}"
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    no_log: true

  - name: certificate | Create a SSL certifcate on dst FlashBlade for {{ repl_loop.key }}
    purefb_certs:
      name: src_repl_cert
      contents: "{{ src_fb_info.purefb_info.config.ssl_certs.certificate }}"
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    no_log: true

  - name: certificate | Add existing certificates to the default certificate group on src FlashBlade for {{ repl_loop.key }}
    purefb_certgrp:
      name: "_default_replication_certs"
      certificates: dst_repl_cert
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    no_log: true

  - name: certificate | Add existing certificates to the default certificate group on dst FlashBlade for {{ repl_loop.key }}
    purefb_certgrp:
      name: "_default_replication_certs"
      certificates: src_repl_cert
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    no_log: true

  - name: replication | Enable encyption on replication connection for {{ repl_loop.key }}
    purefb_connect:
      target_url: "{{ dst_fb_url }}"
      target_api: "{{ dst_fb_token }}"
      encrypted: true
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Create remote cred from src to dst for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.remote_cred_name | default('cred') }}"
      access_key: "{{ dst_access_key }}"
      secret: "{{ dst_secret_key }}"
      target: "{{ dst_fb_name }}" 
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Create new bucket replica link from src to dst for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.src.bucket }}"
      target: "{{ dst_fb_url }}"
      target_bucket: "{{ repl_vars.dst.bucket }}"
      paused: "{{ repl_vars.common_params.repl_pause | default(omit) }}"
      credential: "{{ repl_vars.common_params.remote_cred_name | default('cred') }}"
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Create remote cred dst to src for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.rev_remote_cred_name | default('cred_rev') }}"
      access_key: "{{ src_access_key }}"
      secret: "{{ src_secret_key }}"
      target: "{{ src_fb_name }}" 
      state: present
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.common_params is defined and repl_vars.common_params | length > 0
      - repl_vars.common_params.repl_type is defined
      - repl_vars.common_params.repl_type == 'twoway'

  - name: replication | Create new bucket replica from dst to src for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.dst.bucket }}"
      target: "{{ src_fb_name }}"
      target_bucket: "{{ repl_vars.src.bucket }}"
      paused: "{{ repl_vars.common_params.repl_pause | default(omit) }}"
      credential: "{{ repl_vars.common_params.rev_remote_cred_name | default('cred_rev') }}"
      state: present
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.common_params is defined and repl_vars.common_params | length > 0
      - repl_vars.common_params.repl_type is defined
      - repl_vars.common_params.repl_type == 'twoway'
  
  - name: datavip | Select random data vip from src array to use it as s3 endpoint for {{ repl_loop.key }}
    set_fact:
      data_vip: "{{ item.value.address }}"
    when: ( item.value.services[0] == "data" )
    loop: "{{ src_fb_info.purefb_info.network | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  - name: FBServer | Set source(FB Server) s3 bucket lifecycle rules for {{ repl_loop.key }}
    s3_lifecycle:
      name: "{{ repl_vars.src.bucket }}"
      ec2_url: "http://{{ data_vip }}"
      expiration_days: "{{ repl_vars.src.expiration_days | default(omit) }}"
      noncurrent_version_expiration_days: "{{ repl_vars.src.noncurrent_version_expiration_days | default(90) }}"
      aws_access_key: "{{ src_access_key }}"
      aws_secret_key: "{{ src_secret_key }}"
      prefix: "{{ repl_vars.src.prefix | default(omit) }}"
      status: enabled
      state: present
    when:
      - data_vip | length > 0
      - repl_vars.src.expiration_days is defined or repl_vars.src.noncurrent_version_expiration_days is defined

  - name: datavip | Select random data vip from dst array to use it as s3 endpoint for {{ repl_loop.key }}
    set_fact:
      data_vip: "{{ item.value.address }}"
    when: ( item.value.services[0] == "data" )
    loop: "{{ dst_fb_info.purefb_info.network | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  - name: FBServer | Set destination(FB Server) s3 bucket lifecycle rules for {{ repl_loop.key }}
    s3_lifecycle:
      name: "{{ repl_vars.dst.bucket }}"
      ec2_url: "http://{{ data_vip }}"
      expiration_days: "{{ repl_vars.dst.expiration_days | default(omit) }}"
      noncurrent_version_expiration_days: "{{ repl_vars.dst.noncurrent_version_expiration_days | default(90) }}"
      aws_access_key: "{{ dst_access_key }}"
      aws_secret_key: "{{ dst_secret_key }}"
      prefix: "{{ repl_vars.dst.prefix | default(omit) }}"
      status: enabled
      state: present
    when:
      - data_vip | length > 0
      - repl_vars.dst.expiration_days is defined or repl_vars.dst.noncurrent_version_expiration_days is defined
  when:
    - repl_vars.common_params is not defined or repl_vars.common_params.state is not defined or repl_vars.common_params.state == 'enabled'
    - src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket] is not defined

- name: Destroy remote credential, replica link and disconnect FB servers for {{ repl_loop.key }}
  block:
  - name: replication | Delete bucket replica from src to dst for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.src.bucket }}"
      target: "{{ dst_fb_name }}"
      credential: "{{ repl_vars.common_params.remote_cred_name | default('cred') }}"
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"  
    ignore_errors: true

  - name: replication | Delete remote cred from src to dst for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.remote_cred_name | default('cred') }}"
      target: "{{dst_fb_name}}" 
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    ignore_errors: true

  - name: replication | Delete bucket replica link from dst to src for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.dst.bucket }}"
      target: "{{ src_fb_name }}"
      credential: "{{ repl_vars.common_params.rev_remote_cred_name | default('cred_rev') }}"
      state: absent
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.common_params is defined and repl_vars.common_params | length > 0
      - repl_vars.common_params.repl_type is defined
      - repl_vars.common_params.repl_type == 'twoway'

  - name: replication | Delete remote credential dst to src for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.rev_remote_cred_name | default('cred') }}"
      target: "{{ src_fb_name }}" 
      state: absent
      fb_url: "{{ dst_fb_url }}"
      api_token: "{{ dst_fb_token }}"
    when:
      - repl_vars.common_params is defined and repl_vars.common_params | length > 0
      - repl_vars.common_params.repl_type is defined
      - repl_vars.common_params.repl_type == 'twoway'

  - name: replication | Delete connection to remote FlashBlade for {{ repl_loop.key }}
    purefb_connect:
      target_url: "{{ dst_fb_url }}"
      target_api: "{{ dst_fb_token }}"
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
  when:
    - repl_vars.common_params is defined and repl_vars.common_params | length > 0
    - repl_vars.common_params.state is defined and repl_vars.common_params.state == 'disabled'
    - src_fb_info.purefb_info.default.connected_arrays is defined and src_fb_info.purefb_info.default.connected_arrays|bool
