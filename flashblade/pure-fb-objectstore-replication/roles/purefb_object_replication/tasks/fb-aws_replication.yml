---
- name: facts | Combine array_inventory and array_secrets for {{ repl_loop.key }}
  set_fact:
    combined_inventory: "{{ array_inventory | combine(array_secrets, recursive=True) }}"
  run_once: true
  no_log: true

- name: facts | Set fb_url and fb_token fact from array_inventory for {{ repl_loop.key }}
  set_fact:
    src_fb_url: "{{ combined_inventory[repl_vars.src.server].fb_url }}"
    src_fb_token: "{{ combined_inventory[repl_vars.src.server].api_token }}"
  no_log: true

- name: facts | Get information from src FB server for {{ repl_loop.key }}
  purefb_info:
    gather_subset:
      - minimum
      - buckets
      - network
      - replication
    fb_url: "{{ src_fb_url }}"
    api_token: "{{ src_fb_token }}"
  register: src_fb_info

- name: validation | Fail if src bucket already have replica link for {{ repl_loop.key }}
  fail:
    msg: Cannot have multiple replica links on the same local bucket {{ repl_vars.src.bucket }}
  when:
    - src_fb_info.purefb_info.bucket_replication | length > 0
    - src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket] is defined
    - src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket].remote_bucket != repl_vars.dst.bucket

# src s3 secrets
- name: Create remote credential and replica link for {{ repl_loop.key }}
  block:
  - name: facts | Set src s3 secrets from fb_secrets for {{ repl_loop.key }}
    set_fact:
      src_access_key: "{{ s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user].access_id }}" 
      src_secret_key: "{{ s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user].access_key }}"
    when:
      - s3_secrets is defined and s3_secrets | length > 0
      - s3_secrets[repl_vars.src.account+'_'+repl_vars.src.user] is defined
    # no_log: true

  - name: facts | Set dst s3 secrets from fb_secrets for {{ repl_loop.key }}
    set_fact:
      dst_access_key: "{{ s3_secrets[repl_vars.dst.credential].access_id }}" 
      dst_secret_key: "{{ s3_secrets[repl_vars.dst.credential].access_key }}"
    when:
      - s3_secrets is defined and s3_secrets | length > 0
      - s3_secrets[repl_vars.dst.credential] is defined
      - repl_vars.dst.credential is defined
    no_log: true

  - name: validation | Fail if src bucket not available for {{ repl_loop.key }}
    fail:
      msg: src bucket {{ repl_vars.src.bucket }} does not exist
    when:
      - repl_vars.src.bucket not in src_fb_info.purefb_info.buckets

  - name: validation | Warn if src bucket versioning not enabled for {{ repl_loop.key }}
    fail:
      msg: |
        Source bucket versioning is {{ src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning }}.
        Versioning must me enabled to setup replication. Next task will enable versioning.
    when:
      - repl_vars.src.bucket in src_fb_info.purefb_info.buckets
      - src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'none' or src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'suspended'
    ignore_errors: yes

  - name: versioning | Enable versioning on the src bucket for {{ repl_loop.key }}
    purefb_bucket:
      name: "{{ repl_vars.src.bucket }}"
      account: "{{ repl_vars.src.account }}"
      versioning: enabled
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    when:
      - repl_vars.src.bucket in src_fb_info.purefb_info.buckets
      - src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'none' or src_fb_info.purefb_info.buckets[repl_vars.src.bucket].versioning == 'suspended'

  - name: user | Create s3 user on {{ repl_vars.src.server }} for {{ repl_loop.key }}
    purefb_s3user:
      name: "{{ repl_vars.src.user }}"
      account: "{{ repl_vars.src.account }}"
      access_key: true
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
    register: user_info
    when: 
      - src_access_key is not defined or src_access_key | length == 0
      - src_secret_key is not defined or src_secret_key | length == 0

  - name: validation | Fail if src s3 secrets not available for {{ repl_loop.key }}
    fail:
      msg: >
        Maximum Access Key count reached for user {{ repl_vars.src.user }}, 
        create user with different name to generate secret keys
    when:
      - user_info.s3user_info is not defined or user_info.s3user_info | length == 0 

  - name: secrets | Set source access key and secret key for {{ repl_loop.key }}
    set_fact:
      src_access_key: "{{ user_info.s3user_info.fb_s3user.access_id }}"
      src_secret_key: "{{ user_info.s3user_info.fb_s3user.access_key }}"
    when: 
      - user_info.s3user_info is defined 
      - user_info.s3user_info | length > 0
    no_log: true

  # secret validation
  - name: validation | Fail if s3 secrets not available for {{ repl_loop.key }}
    fail:
      msg: s3 secrets {{ item }} not available
    loop: 
      - src_access_key
      - src_secret_key
      - dst_access_key
      - dst_secret_key
    when: vars[item] is not defined
    no_log: true

  - name: facts | Get s3 bucket list from aws for {{ repl_loop.key }}
    aws_s3_bucket_info:
      aws_access_key: "{{ dst_access_key }}"
      aws_secret_key: "{{ dst_secret_key }}"
      region: "{{ repl_vars.dst.region | default('us-west-2') }}"
    register: aws_s3_list
    no_log: true

  - name: aws | Create s3 bucket on AWS if not present for {{ repl_loop.key }}
    s3_bucket:
      name: "{{ repl_vars.dst.bucket }}"
      versioning: yes
      aws_access_key: "{{ dst_access_key }}"
      aws_secret_key: "{{ dst_secret_key }}"
      region: "{{ repl_vars.dst.region | default('us-west-2') }}"
    register: aws_s3_bucket
    when: repl_vars.dst.bucket not in aws_s3_list
    no_log: true

  - name: aws | Set target(AWS) s3 bucket lifecycle rules for {{ repl_loop.key }}
    s3_lifecycle:
      name: "{{ repl_vars.dst.bucket }}"
      expiration_days: "{{ repl_vars.dst.expiration_days | default(omit) }}"
      noncurrent_version_expiration_days: "{{ repl_vars.dst.noncurrent_version_expiration_days | default(90) }}"
      aws_access_key: "{{ dst_access_key }}"
      aws_secret_key: "{{ dst_secret_key }}"
      prefix: "{{ repl_vars.dst.prefix | default(omit) }}"
      region: "{{ repl_vars.dst.region | default('us-west-2') }}"
      status: enabled
      state: present
    when:
      - repl_vars.dst.expiration_days is defined or repl_vars.dst.noncurrent_version_expiration_days is defined

  - name: datavip | Select random data vip to use it as s3 endpoint for {{ repl_loop.key }}
    set_fact:
      data_vip: "{{ item.value.address }}"
    when: ( item.value.services[0] == "data" )
    loop: "{{ src_fb_info.purefb_info.network | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  - name: FBServer | Set source(FB Server) s3 bucket lifecycle rules for {{ repl_loop.key }}
    s3_lifecycle:
      name: "{{ repl_vars.src.bucket }}"
      ec2_url: "http://{{ data_vip }}"
      expiration_days: "{{ repl_vars.src.expiration_days | default(omit) }}"
      noncurrent_version_expiration_days: "{{ repl_vars.src.noncurrent_version_expiration_days | default(90) }}"
      aws_access_key: "{{ src_access_key }}"
      aws_secret_key: "{{ src_secret_key }}"
      prefix: "{{ repl_vars.src.prefix | default(omit) }}"
      status: enabled
      state: present
    when:
      - data_vip | length > 0
      - repl_vars.src.expiration_days is defined or repl_vars.src.noncurrent_version_expiration_days is defined

  - name: replication | Create a connection to remote S3-capable target for {{ repl_loop.key }}
    purefb_target:
      name: "{{ repl_vars.common_params.remote_connection_name | default('aws_target') }}"
      address: "{{ repl_vars.dst.server }}"
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Create remote cred from src to dst for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.remote_cred_name | default('aws_cred') }}"
      access_key: "{{dst_access_key}}"
      secret: "{{dst_secret_key}}"
      target: "{{ repl_vars.common_params.remote_connection_name | default('aws_target') }}"
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Create new bucket replica from src to dst for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.src.bucket }}"
      target: "{{ repl_vars.common_params.remote_connection_name | default('aws_target') }}"
      target_bucket: "{{repl_vars.dst.bucket}}"
      paused: "{{ repl_vars.common_params.pause_repl | default(omit) }}"
      credential: "{{ repl_vars.common_params.remote_cred_name | default('aws_cred') }}"
      state: present
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
  when:
    - repl_vars.common_params is not defined or repl_vars.common_params.state is not defined or repl_vars.common_params.state == 'present'
    - src_fb_info.purefb_info.bucket_replication | length == 0 or src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket] is not defined or src_fb_info.purefb_info.bucket_replication[repl_vars.src.bucket].remote_bucket != repl_vars.dst.bucket

- name: Delete remote credential and replica link for {{ repl_loop.key }}
  block:
  - name: replication | Delete bucket replica link for {{ repl_loop.key }}
    purefb_bucket_replica:
      name: "{{ repl_vars.src.bucket }}"
      target: "{{ repl_vars.common_params.remote_connection_name | default('aws_target')}}"
      credential: "{{ repl_vars.common_params.remote_cred_name | default('aws_cred') }}"
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Delete remote credential for {{ repl_loop.key }}
    purefb_remote_cred:
      name: "{{ repl_vars.common_params.remote_cred_name | default('aws_cred') }}"
      target: "{{ repl_vars.common_params.remote_connection_name | default('aws_target') }}"
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"

  - name: replication | Delete connection to remote S3-capable target for {{ repl_loop.key }}
    purefb_target:
      name: "{{ repl_vars.common_params.remote_connection_name | default('aws_target') }}"
      state: absent
      fb_url: "{{ src_fb_url }}"
      api_token: "{{ src_fb_token }}"
  when:
    - repl_vars.common_params is defined
    - repl_vars.common_params.state is defined and repl_vars.common_params.state == 'absent'
    - src_fb_info.purefb_info.default.targets is defined and src_fb_info.purefb_info.default.targets|bool
