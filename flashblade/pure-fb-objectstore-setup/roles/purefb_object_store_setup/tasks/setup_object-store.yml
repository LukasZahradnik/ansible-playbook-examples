---
- name: account | Create s3 account on {{ outer_loop.key }}
  purefb_s3acc:
    name: "{{ s3_var.account }}"
    state: "{{ 'absent' if s3_var.delete_account is defined and s3_var.delete_account|bool else 'present' }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"

- name: user | Create s3 user on {{ outer_loop.key }}
  purefb_s3user:
    name: "{{ item.name }}"
    account: "{{ s3_var.account }}"
    access_key: "{{ item.create_new_access_key|default(omit) }}"
    state: "{{ 'absent' if item.delete_user is defined and item.delete_user|bool else 'present' }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"
  register: user_info
  loop: "{{ s3_var.users | default([]) }}"
  when: item is defined

- name: facts | Set s3_user_info fact {{ outer_loop.key }}
  set_fact:
    s3_user_info: "{{ item.s3user_info }}"
  loop: "{{ user_info.results }}"
  when: item.s3user_info is defined and item.s3user_info|length > 0 

- name: Store s3 secrets in a file
  block:
  - name: secrets | Create s3_secrets directory at vars/{{env}}
    file: 
      dest: "{{playbook_dir}}/vars/{{env}}/s3_secrets"
      state: directory

  - name: secrets | Write S3 secrets in a file 
    copy:
      content: "{{ item.s3user_info.fb_s3user | to_nice_yaml }}"
      dest: "{{playbook_dir}}/vars/{{env}}/s3_secrets/{{item.s3user_info.fb_s3user.user | replace('/','_') }}.yml"
      backup: yes
    loop: "{{ user_info.results }}"
    when: item.s3user_info is defined and item.s3user_info | length > 0
    delegate_to: localhost
    no_log: true

  - name: encrypt | Block to encrypt s3 secrets file
    block:  
    - name: secrets | Create tmp file to hold ansible vault password
      file: 
        dest: "/tmp/ansible_pass"
        state: touch

    - name: secrets | Store ansible-vault password in a file 
      copy:
        content: "{{ s3_ansible_vault_pass | default('pureansible') }}"
        dest: "/tmp/ansible_pass"
      delegate_to: localhost
      no_log: true
    
    - name: check if s3 secrets file exists
      stat: 
        path: "{{playbook_dir}}/vars/{{env}}/s3_secrets"
      register: s3_secrets_file

    - name: encrypt | Encrypt s3 secrets file
      command: > 
        ansible-vault encrypt  "{{item}}" 
        --vault-password-file /tmp/ansible_pass
      with_fileglob: '{{playbook_dir}}/vars/{{env}}/s3_secrets/*'
      when: s3_secrets_file.stat.exists | bool
      failed_when: false
      changed_when: false
      ignore_errors: true
      no_log: true
    always:
    - name: secrets | Delete ansible vault password file
      file: 
        dest: "/tmp/ansible_pass"
        state: absent
  when:
    - s3_user_info is defined 

- name: bucket | Create bucket on {{ outer_loop.key }}
  purefb_bucket:
    name: "{{ item.name }}"
    account: "{{ s3_var.account }}"
    versioning: "{{ item.versioning|default(omit) }}"
    state: "{{ 'absent' if item.destroy_bucket is defined and item.destroy_bucket|bool else 'present' }}"
    eradicate: "{{ item.eradicate|default(omit) }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"
  loop: "{{ s3_var.buckets | default([]) }}"
  when: item is defined
