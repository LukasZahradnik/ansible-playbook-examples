---
- name: FBServer_validation | Fail if given Flashblade server not exist for {{ outer_loop.key }}
  fail:
    msg: FB server {{ mount_details.server.fb_name }} not available
  when: mount_details.server.fb_name not in array_inventory
  delegate_to: "localhost"
  run_once: true

- name: facts | Set fb_url and fb_token fact from array_inventory for {{ outer_loop.key }}
  set_fact:
    fb_url: "{{ array_inventory[mount_details.server.fb_name].fb_url }}"
    fb_token: "{{ array_secrets[mount_details.server.fb_name].api_token }}"
  no_log: true
  run_once: true

- name: facts | Get information from {{ mount_details.server.fb_name }} for {{ outer_loop.key }}
  purefb_info:
    gather_subset: 
      - config
      - network
      - subnets
      - filesystems
    fb_url: "{{ fb_url }}"
    api_token: "{{ fb_token }}"
  delegate_to: "localhost"
  run_once: true
  become: false
  register: blade_info

- name: fileshare_validation | Fail if fileshare not exist on {{ mount_details.server.fb_name }}
  fail:
    msg: Fileshare {{ mount_details.server.fileshare }} not available on FB server
  when: mount_details.server.fileshare not in blade_info['purefb_info']['filesystems']
  delegate_to: "localhost"
  run_once: true

- name: fileshare_validation | Fail if fileshare is in destroyed state on {{ mount_details.server.fb_name }}
  fail:
    msg: Fileshare {{ mount_details.server.fileshare }} is in destroyed state on FB server
  when:
    - mount_details.server.fileshare in blade_info['purefb_info']['filesystems']
    - blade_info['purefb_info']['filesystems'][mount_details.server.fileshare]['destroyed']|bool
  delegate_to: "localhost"
  run_once: true

- name: VIP_validation | Fail if data VIP not exist on {{ mount_details.server.fb_name }}
  fail:
    msg: data VIP {{ mount_details.server.data_vip }} not available on FB server
  when: mount_details.server.data_vip not in blade_info['purefb_info']['network']

- name: mount | Mount filesystem for {{ outer_loop.key }}
  block:
    - name: mount | Verify mount point exist or not for {{ outer_loop.key }}
      stat: "path={{ mount_details['client']['mount_point'] }}"
      register: mountpoint

    - name: mount | Create a directory if it does not exist for {{ outer_loop.key }}
      file: 
        path: "{{ mount_details['client']['mount_point'] }}"
        state: directory
        mode: '0755'
      become: true
      when: mountpoint.stat.exists == False
      
    - name: mount | Mount filesystem for {{ outer_loop.key }}
      mount:
        path: "{{ mount_details['client']['mount_point'] }}"
        state: mounted
        fstype: nfs
        opts: "{{ mount_details['client']['opts'] }}"
        src: "{{ blade_info['purefb_info']['network'][mount_details.server.data_vip]['address'] }}:/{{ mount_details.server.fileshare }}"
      become: true
  when: 
    - mount_details.client.hosts in group_names or mount_details.client.hosts == inventory_hostname or mount_details.client.hosts == ansible_hostname
    - mount_details.client.mount_state is not defined or mount_details.client.mount_state == 'mount'

- name: unmount | Unmount filesystem for {{ outer_loop.key }}
  block:
    - name: unmount | Unmount filesystem for {{ outer_loop.key }}
      mount:
        path: "{{ mount_details['client']['mount_point'] }}"
        state: absent
      become: true

    - name: unmount | Verify mount point exist for {{ outer_loop.key }}
      stat: "path={{ mount_details['client']['mount_point'] }}"
      register: mountpoint

    - name: unmount | Delete a directory if it exist for {{ outer_loop.key }}
      file: 
        path: "{{ mount_details['client']['mount_point'] }}"
        state: absent
      become: true
      when: mountpoint.stat.exists == True
  when: 
    - mount_details.client.hosts in group_names or mount_details.client.hosts == inventory_hostname or mount_details.client.hosts == ansible_hostname
    - mount_details.client.mount_state is defined and mount_details.client.mount_state == 'unmount'
