---
- name: List IQN
  hosts: Initiators_Hosts
  become: true
  tasks:
    - name: Obtain IQN from Initiators_Hosts
      ansible.builtin.shell: >
        set -o pipefail &&
        (cat /etc/iscsi/initiatorname.iscsi |
        grep "^InitiatorName=iqn" |
        awk -F'=' '{print $2}')
      register: iqn
      changed_when: false
      args:
        executable: /bin/bash

    - name: IQN Results
      ansible.builtin.debug:
        msg:
          - "Inventory Hostname: {{ inventory_hostname }}"
          - "Hostname: {{ ansible_hostname }}"
          - "IQN: {{ iqn.stdout }}"

- name: Setup environment
  hosts: localhost
  tasks:
    - name: Import storage service/class variables
      ansible.builtin.include_vars: group_vars/workloads.yml

    - name: Setup local variables
      ansible.builtin.set_fact:
        iqn_data: []
        map_volumes: {}

    - name: Check private key exists
      ansible.builtin.stat:
        path: "{{ priv_key_file }}"
      register: result

    - name: End run if missing private key
      ansible.builtin.meta: end_play
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)

    - name: Create IQN/Hostname dictionary
      ansible.builtin.set_fact:
        iqn_data: "{{ iqn_data | default([]) + [{'hostname': item, 'iqn': (hostvars[item]['iqn'].stdout)}] }}"
      with_items:
        - "{{ groups['Initiators_Hosts'] }}"

    - name: Create host access policy
      purestorage.fusion.fusion_hap:
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
        state: "present"
        name: "{{ item.hostname }}"
        display_name: "{{ item.hostname }}"
        personality: "linux"
        iqn: "{{ item.iqn }}"
      with_items: "{{ iqn_data }}"
      when: item.iqn | length > 0

    - name: Create new tenant space(s)
      purestorage.fusion.fusion_ts:
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
        state: "present" # or absent
        name: "{{ item.name }}"
        display_name: "{{ item.display_name }}"
        tenant: "{{ item.tenant }}"
      loop: "{{ tenant_space }}"

    - name: Create new placement group(s)
      purestorage.fusion.fusion_pg:
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
        state: "present" # or absent
        name: "{{ item.name }}"
        display_name: "{{ item.display_name }}"
        tenant: "{{ item.tenant }}"
        tenant_space: "{{ item.tenant_space }}"
        availability_zone: "{{ item.availability_zone }}"
        storage_service: "{{ item.storage_service }}"
        region: "{{ item.region }}"
      loop: "{{ placement_groups }}"

    - name: Create new volume(s)
      purestorage.fusion.fusion_volume:
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
        state: "present" # or absent
        name: "{{ item.name }}"
        display_name: "{{ item.display_name }}"
        size: "{{ item.size }}"
        storage_class: "{{ item.storage_class }}"
        tenant: "{{ item.tenant }}"
        tenant_space: "{{ item.tenant_space }}"
        placement_group: "{{ item.placement_group }}"
        host_access_policies: "{{ item.host_access_policies }}"
      loop: "{{ volumes }}"

    - name: Get Volumes info
      purestorage.fusion.fusion_info:
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
        gather_subset: volumes
      register: fusion_info

    - name: Map Volumes with (Serial ID and IQN )
      ansible.builtin.set_fact:
        map_volumes: >-
          {{ map_volumes | combine(
            {item.value.name.lower(): {'serial': item.value.serial_number, 'iqn': (item.value.target.iscsi.iqn).lower()}}
          ) }}
      with_dict: "{{ fusion_info['fusion_info']['volumes'] }}"

    - name: Get Purestorage Storage Endpoints
      purestorage.fusion.fusion_info:
        gather_subset: storage_endpoints
        issuer_id: "{{ issuer_id }}"
        private_key_file: "{{ priv_key_file }}"
      register: reg_fusion_info

- name: Run an IO workload
  hosts: Initiators_Hosts
  become: true
  tasks:
    - name: Setup local variables
      ansible.builtin.set_fact:
        valid_volumes: {}
        devices: {}
        iscsi_interfaces: []
        list_ip: []
        iqn_list: []
        reg_fusion_info: "{{ hostvars['localhost']['reg_fusion_info'] }}"

    - name: Obtain list of volumes to mount
      ansible.builtin.set_fact:
        valid_volumes: "{{ valid_volumes | combine({item.name: item.mount_path}) }}"
      with_items: "{{ hostvars['localhost']['volumes'] }}"
      when: inventory_hostname in item.host_access_policies

    - name: Print valid volumes
      ansible.builtin.debug:
        msg: "{{ valid_volumes }}"

    - name: Parse volume, mount path and volume id
      ansible.builtin.set_fact:
        devices: "{{ devices | combine({valid_volumes[item.key]: item.value}) }}"
      with_dict: "{{ hostvars['localhost']['map_volumes'] }}"
      when: item.key in valid_volumes.keys()

    - name: Print mount pairs
      ansible.builtin.debug:
        msg:
          - "Mount: /dev/mapper/{{ item.value.serial }}"
          - "On: {{ item.key }}"
      with_dict: "{{ devices }}"

    - name: Get a list of iscsi_interfaces
      ansible.builtin.set_fact:
        iscsi_interfaces: "{{ iscsi_interfaces + [reg_fusion_info['fusion_info']['storage_endpoints'][item]['iscsi_interfaces']] }}"
      with_items: "{{ reg_fusion_info['fusion_info']['storage_endpoints'].keys() }}"

    - name: Extract IP from iscsi_interfaces
      ansible.builtin.set_fact:
        list_ip: "{{ list_ip + [item['address'].split('/')[0]] }}"
      with_items: "{{ iscsi_interfaces }}"

    - name: "Perform a discovery and show available target nodes"
      community.general.open_iscsi:
        show_nodes: true
        discover: true
        ip: "{{ item }}"
      with_items: "{{ list_ip }}"

    - name: Get a list of IQN with unique elements
      ansible.builtin.set_fact:
        iqn_list: "{{ iqn_list + [item.value.iqn] }}"
      with_dict: "{{ devices }}"
      when: item.value.iqn not in iqn_list

    - name: Connect to the named target
      community.general.open_iscsi:
        login: true
        target: "{{ item }}"
      loop: "{{ iqn_list }}"

    - name: Format multipath device
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/mapper/{{ item.value.serial }}"
      with_dict: "{{ devices }}"

    - name: Creates directory for mountpoints
      ansible.builtin.file:
        path: "{{ item.key }}"
        state: directory
        mode: "0755"
      with_dict: "{{ devices }}"

    - name: Mount volumes
      ansible.posix.mount:
        path: "{{ item.key }}"
        src: "/dev/mapper/{{ item.value.serial }}"
        fstype: ext4
        state: mounted
      with_dict: "{{ devices }}"

    - name: Install fio
      ansible.builtin.package:
        name: fio
        state: present

    - name: Copy initiator_random_write.fio
      ansible.builtin.copy:
        src: "./files/initiator_random_write.fio"
        dest: "/tmp/initiator_random_write.fio"
        mode: "0644"

    - name: Run FIO process
      when: run_fio is true
      ansible.builtin.command:
        chdir: "{{ item.mount_path }}"
        cmd: "fio /tmp/initiator_random_write.fio"
      with_items: "{{ hostvars['localhost']['volumes'] }}"
      register: raw_stdout_fio_results
      changed_when: true

    - name: FIO Results
      when: run_fio is true
      ansible.builtin.debug:
        var: "{{ item.stdout_lines }}"
      loop: "{{ raw_stdout_fio_results.results }}"
